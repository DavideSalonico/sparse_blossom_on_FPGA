-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2.2 (64-bit)
-- Version: 2022.2.2
-- Copyright (C) Copyright 1986-2023 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_corr is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    syndrome_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    syndrome_ce0 : OUT STD_LOGIC;
    syndrome_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    corrections_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    corrections_ce0 : OUT STD_LOGIC;
    corrections_we0 : OUT STD_LOGIC;
    corrections_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of compute_corr is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "compute_corr_compute_corr,hls_ip_2022_2_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu11p-flga2577-1-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.602000,HLS_SYN_LAT=27,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=60,HLS_SYN_LUT=225,HLS_VERSION=2022_2_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal corr_internal_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal corr_internal_ce0 : STD_LOGIC;
    signal corr_internal_we0 : STD_LOGIC;
    signal corr_internal_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_corr_Pipeline_compute_fu_26_ap_start : STD_LOGIC;
    signal grp_compute_corr_Pipeline_compute_fu_26_ap_done : STD_LOGIC;
    signal grp_compute_corr_Pipeline_compute_fu_26_ap_idle : STD_LOGIC;
    signal grp_compute_corr_Pipeline_compute_fu_26_ap_ready : STD_LOGIC;
    signal grp_compute_corr_Pipeline_compute_fu_26_syndrome_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_corr_Pipeline_compute_fu_26_syndrome_ce0 : STD_LOGIC;
    signal grp_compute_corr_Pipeline_compute_fu_26_corr_internal_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_corr_Pipeline_compute_fu_26_corr_internal_ce0 : STD_LOGIC;
    signal grp_compute_corr_Pipeline_compute_fu_26_corr_internal_we0 : STD_LOGIC;
    signal grp_compute_corr_Pipeline_compute_fu_26_corr_internal_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_start : STD_LOGIC;
    signal grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_done : STD_LOGIC;
    signal grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_idle : STD_LOGIC;
    signal grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_ready : STD_LOGIC;
    signal grp_compute_corr_Pipeline_write_and_reset_fu_34_corrections_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_corr_Pipeline_write_and_reset_fu_34_corrections_ce0 : STD_LOGIC;
    signal grp_compute_corr_Pipeline_write_and_reset_fu_34_corrections_we0 : STD_LOGIC;
    signal grp_compute_corr_Pipeline_write_and_reset_fu_34_corrections_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_compute_corr_Pipeline_write_and_reset_fu_34_corr_internal_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compute_corr_Pipeline_write_and_reset_fu_34_corr_internal_ce0 : STD_LOGIC;
    signal grp_compute_corr_Pipeline_compute_fu_26_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component compute_corr_compute_corr_Pipeline_compute IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        syndrome_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        syndrome_ce0 : OUT STD_LOGIC;
        syndrome_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        corr_internal_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        corr_internal_ce0 : OUT STD_LOGIC;
        corr_internal_we0 : OUT STD_LOGIC;
        corr_internal_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compute_corr_compute_corr_Pipeline_write_and_reset IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        corrections_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        corrections_ce0 : OUT STD_LOGIC;
        corrections_we0 : OUT STD_LOGIC;
        corrections_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        corr_internal_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        corr_internal_ce0 : OUT STD_LOGIC;
        corr_internal_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component compute_corr_corr_internal_RAM_AUTO_1R1W IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    corr_internal_U : component compute_corr_corr_internal_RAM_AUTO_1R1W
    generic map (
        DataWidth => 32,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => corr_internal_address0,
        ce0 => corr_internal_ce0,
        we0 => corr_internal_we0,
        d0 => grp_compute_corr_Pipeline_compute_fu_26_corr_internal_d0,
        q0 => corr_internal_q0);

    grp_compute_corr_Pipeline_compute_fu_26 : component compute_corr_compute_corr_Pipeline_compute
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_corr_Pipeline_compute_fu_26_ap_start,
        ap_done => grp_compute_corr_Pipeline_compute_fu_26_ap_done,
        ap_idle => grp_compute_corr_Pipeline_compute_fu_26_ap_idle,
        ap_ready => grp_compute_corr_Pipeline_compute_fu_26_ap_ready,
        syndrome_address0 => grp_compute_corr_Pipeline_compute_fu_26_syndrome_address0,
        syndrome_ce0 => grp_compute_corr_Pipeline_compute_fu_26_syndrome_ce0,
        syndrome_q0 => syndrome_q0,
        corr_internal_address0 => grp_compute_corr_Pipeline_compute_fu_26_corr_internal_address0,
        corr_internal_ce0 => grp_compute_corr_Pipeline_compute_fu_26_corr_internal_ce0,
        corr_internal_we0 => grp_compute_corr_Pipeline_compute_fu_26_corr_internal_we0,
        corr_internal_d0 => grp_compute_corr_Pipeline_compute_fu_26_corr_internal_d0);

    grp_compute_corr_Pipeline_write_and_reset_fu_34 : component compute_corr_compute_corr_Pipeline_write_and_reset
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_start,
        ap_done => grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_done,
        ap_idle => grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_idle,
        ap_ready => grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_ready,
        corrections_address0 => grp_compute_corr_Pipeline_write_and_reset_fu_34_corrections_address0,
        corrections_ce0 => grp_compute_corr_Pipeline_write_and_reset_fu_34_corrections_ce0,
        corrections_we0 => grp_compute_corr_Pipeline_write_and_reset_fu_34_corrections_we0,
        corrections_d0 => grp_compute_corr_Pipeline_write_and_reset_fu_34_corrections_d0,
        corr_internal_address0 => grp_compute_corr_Pipeline_write_and_reset_fu_34_corr_internal_address0,
        corr_internal_ce0 => grp_compute_corr_Pipeline_write_and_reset_fu_34_corr_internal_ce0,
        corr_internal_q0 => corr_internal_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_compute_corr_Pipeline_compute_fu_26_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_corr_Pipeline_compute_fu_26_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_compute_corr_Pipeline_compute_fu_26_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_corr_Pipeline_compute_fu_26_ap_ready = ap_const_logic_1)) then 
                    grp_compute_corr_Pipeline_compute_fu_26_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_ready = ap_const_logic_1)) then 
                    grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_compute_corr_Pipeline_compute_fu_26_ap_done, grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_compute_corr_Pipeline_compute_fu_26_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state2_blk_assign_proc : process(grp_compute_corr_Pipeline_compute_fu_26_ap_done)
    begin
        if ((grp_compute_corr_Pipeline_compute_fu_26_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state2_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state2_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state3_blk <= ap_const_logic_0;

    ap_ST_fsm_state4_blk_assign_proc : process(grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_done)
    begin
        if ((grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    corr_internal_address0_assign_proc : process(grp_compute_corr_Pipeline_compute_fu_26_corr_internal_address0, grp_compute_corr_Pipeline_write_and_reset_fu_34_corr_internal_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            corr_internal_address0 <= grp_compute_corr_Pipeline_write_and_reset_fu_34_corr_internal_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            corr_internal_address0 <= grp_compute_corr_Pipeline_compute_fu_26_corr_internal_address0;
        else 
            corr_internal_address0 <= "XXXX";
        end if; 
    end process;


    corr_internal_ce0_assign_proc : process(grp_compute_corr_Pipeline_compute_fu_26_corr_internal_ce0, grp_compute_corr_Pipeline_write_and_reset_fu_34_corr_internal_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            corr_internal_ce0 <= grp_compute_corr_Pipeline_write_and_reset_fu_34_corr_internal_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            corr_internal_ce0 <= grp_compute_corr_Pipeline_compute_fu_26_corr_internal_ce0;
        else 
            corr_internal_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    corr_internal_we0_assign_proc : process(grp_compute_corr_Pipeline_compute_fu_26_corr_internal_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            corr_internal_we0 <= grp_compute_corr_Pipeline_compute_fu_26_corr_internal_we0;
        else 
            corr_internal_we0 <= ap_const_logic_0;
        end if; 
    end process;

    corrections_address0 <= grp_compute_corr_Pipeline_write_and_reset_fu_34_corrections_address0;
    corrections_ce0 <= grp_compute_corr_Pipeline_write_and_reset_fu_34_corrections_ce0;
    corrections_d0 <= grp_compute_corr_Pipeline_write_and_reset_fu_34_corrections_d0;
    corrections_we0 <= grp_compute_corr_Pipeline_write_and_reset_fu_34_corrections_we0;
    grp_compute_corr_Pipeline_compute_fu_26_ap_start <= grp_compute_corr_Pipeline_compute_fu_26_ap_start_reg;
    grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_start <= grp_compute_corr_Pipeline_write_and_reset_fu_34_ap_start_reg;
    syndrome_address0 <= grp_compute_corr_Pipeline_compute_fu_26_syndrome_address0;
    syndrome_ce0 <= grp_compute_corr_Pipeline_compute_fu_26_syndrome_ce0;
end behav;
